{
  "permissions": {
    "allow": [
      "WebFetch(domain:clinicaltrials.gov)",
      "Bash(mkdir:*)",
      "Bash(zip:*)",
      "Bash(rm:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(/Users/adusubramanian/clintrials-mcp/.venv/bin/python mcp_server.py)",
      "Bash(/Users/adusubramanian/clintrials-mcp/.venv/bin/python -c \"import mcp; print(mcp.__version__)\")",
      "Bash(/Users/adusubramanian/clintrials-mcp/.venv/bin/python test_functions.py)",
      "Bash(/Users/adusubramanian/clintrials-mcp/.venv/bin/python test_mcp_tools.py)",
      "Bash(/Users/adusubramanian/clintrials-mcp/.venv/bin/python -c \"import mcp.types; print(dir(mcp.types.CallToolResult))\")",
      "Bash(/Users/adusubramanian/clintrials-mcp/.venv/bin/python -c \"from mcp.types import CallToolResult; print(CallToolResult.model_fields)\")",
      "Bash(/Users/adusubramanian/clintrials-mcp/.venv/bin/python test_jsonrpc.py)",
      "Bash(/Users/adusubramanian/clintrials-mcp/.venv/bin/pip list)",
      "Bash(/Users/adusubramanian/clintrials-mcp/.venv/bin/python -c \"\nimport asyncio\nfrom mcp_server import handle_call_tool\n\nasync def test():\n    # Test error case\n    try:\n        result = await handle_call_tool(''nonexistent_tool'', {})\n        print(f''Error result type: {type(result)}'')\n        print(f''Error result isError: {result.isError}'')\n        print(f''Error result content: {result.content[0].text}'')\n    except Exception as e:\n        print(f''Exception: {e}'')\n\nasyncio.run(test())\n\")",
      "Bash(/Users/adusubramanian/clintrials-mcp/.venv/bin/python -c \"import mcp; print(mcp.__version__)\")",
      "Bash(/Users/adusubramanian/clintrials-mcp/.venv/bin/python -c \"from mcp.types import CallToolResult; print(CallToolResult.model_fields)\")",
      "Bash(/Users/adusubramanian/clintrials-mcp/.venv/bin/python debug_callresult.py)",
      "Bash(/Users/adusubramanian/clintrials-mcp/.venv/bin/python test_server_debug.py)",
      "Bash(/Users/adusubramanian/clintrials-mcp/.venv/bin/python test_stdio_server.py)",
      "Bash(/Users/adusubramanian/clintrials-mcp/.venv/bin/python -c \"\nimport sys\nsys.path.append(''/Users/adusubramanian/clintrials-mcp'')\nfrom mcp_server import DEFAULT_STUDY_FIELDS, MINIMAL_STUDY_FIELDS, AVAILABLE_FIELD_CATEGORIES\n\nprint(''DEFAULT_STUDY_FIELDS:'')\nprint(len(DEFAULT_STUDY_FIELDS), ''fields'')\nprint(DEFAULT_STUDY_FIELDS[:5], ''...'')\n\nprint(''\\nMINIMAL_STUDY_FIELDS:'')\nprint(MINIMAL_STUDY_FIELDS)\n\nprint(''\\nAVAILABLE_FIELD_CATEGORIES:'')\nfor category in AVAILABLE_FIELD_CATEGORIES:\n    print(f''{category}: {len(AVAILABLE_FIELD_CATEGORIES[category][\"\"fields\"\"])} fields'')\n\")",
      "Bash(/Users/adusubramanian/clintrials-mcp/.venv/bin/python -c \"\nimport asyncio\nimport sys\nsys.path.append(''/Users/adusubramanian/clintrials-mcp'')\nfrom mcp_server import handle_call_tool, AVAILABLE_FIELD_CATEGORIES, DEFAULT_STUDY_FIELDS\n\nasync def test_tools():\n    # Test get_available_fields\n    print(''Testing get_available_fields...'')\n    result = await handle_call_tool(''get_available_fields'', {})\n    print(''✓ get_available_fields works'')\n    \n    # Test get_available_fields with category\n    result2 = await handle_call_tool(''get_available_fields'', {''category'': ''identification''})\n    print(''✓ get_available_fields with category works'')\n    \n    print(''All tool handlers are properly configured!'')\n\nasyncio.run(test_tools())\n\")",
      "Bash(/Users/adusubramanian/clintrials-mcp/.venv/bin/python -c \"\nfrom mcp_server import ClinicalTrialsAPI, DEFAULT_STUDY_FIELDS, MINIMAL_STUDY_FIELDS\n\n# Test API client initialization\napi = ClinicalTrialsAPI()\nprint(''✓ API client initialized successfully'')\n\n# Test URL construction \nprint(''Base URL:'', api.BASE_URL)\nprint(''✓ Configuration looks correct'')\n\nprint(''Default fields count:'', len(DEFAULT_STUDY_FIELDS))\nprint(''Minimal fields count:'', len(MINIMAL_STUDY_FIELDS))\nprint(''✓ Field configurations are set up correctly'')\n\")"
    ],
    "deny": []
  }
}